---
title: "GAM_plots_comps_functions"
format: html
editor: visual
---

The goal of this document is to create functions that simplify the creation of GAM models and the pairwise comparisons of the smooths.

```{r, echo=FALSE, warning=FALSE}

library(here)
library(scales)
library(viridis)
library(patchwork)
library(mgcv)
library(tidyverse)
library(gratia)
library(showtext)
library(scico)
font_add("Atkinson",regular="AtkinsonHyperlegible-Regular.ttf",italic="AtkinsonHyperlegible-Italic.ttf")
showtext_auto()

thm1<-scale_fill_scico_d(palette="tofino",begin=0.2, end=0.8, direction =1, aesthetics = c("colour","fill"))
```

Load data. Variable `GROUP` needs to be a factor. Also, create the Oxyhemoglobin and Deoxyhemoglobin variables and add them to the dataframe.

```{r,StO2 plot, echo=TRUE}
data1 <- read.csv(here("data","Extraction_merged_2018_2020_2021_cohorts_FINAL.csv"))

data1$GROUP<-as.factor(data1$GROUP)
data1$HBO2<-(data1$HB*data1$STO2)
data1$HBO2_SD<-data1$HB_SD*data1$STO2
data1$HBO<-data1$HB*(1-data1$STO2)
data1$HBO_SD<-data1$HB_SD*(1-data1$STO2)

#change all MG labels to MET

data1<-data1 %>%
  mutate(GROUP=case_when(as.character(GROUP)=="MG"~"MET",
                         TRUE ~ as.character(GROUP)))

  data1$GROUP<-as.factor(data1$GROUP)


```

Get mean value at week 1

```{r,mean-at_wk1}
#get mean values per group at wk1

mean_wk1 <- subset(data1, DAY==1) %>%
  group_by(GROUP) %>%
  summarise(baseline_StO2=mean(STO2, na.rm=TRUE),
            baseline_HbO2=mean(HBO2, na.rm=TRUE),
            baseline_HbO=mean(HBO, na.rm=TRUE),
            baseline_tHb=mean(HB, na.rm=TRUE)
            )
  
#paste values back into the data1 dataframe
data1<-left_join(data1,mean_wk1,by="GROUP")
 
#calculate fold values

data1<-data1 %>%
  mutate(StO2_fold=STO2/baseline_StO2,
         tHb_fold=HB/baseline_tHb,
         HbO2_fold=HBO2/baseline_HbO2,
         HbO_fold=HBO/baseline_HbO)


```

# GAMs

GAM with interaction of group and time. All models for fold-change values will follow the same basic construction:

`model<-gam(Variable~Group+s(Day,by=Group=k=6,` \n `method= 'REML',`\n `data=data1)`

```{r,fit-GAMs}
StO2_gam <- gam(StO2_fold ~ GROUP+s(DAY, by = GROUP, k = 6),
            method='REML',
            data  = data1)

HbO2_gam <- gam(HbO2_fold ~ GROUP+s(DAY, by = GROUP, k = 6),
            method='REML',
            data  = data1)

tHb_gam <- gam(tHb_fold ~ GROUP+s(DAY, by = GROUP, k = 6),
            method='REML',
            data  = data1)

HbO_gam <- gam(HbO_fold ~ GROUP+s(DAY, by = GROUP, k = 6),
            method='REML',
            data  = data1)

```

This is the original function but the improved version is below. This chunk is not evaluated.

```{r,orig-GAM-funct,eval=FALSE}
#this function takes a GAM model and creates the confidence intervals (both CI and SI) and outputs the plot with the raw data
GAM_plot<-function(model,data){
  
  pnt<-4
al<-0.2
  #create grid
  gam_predict <- expand_grid(GROUP = factor(c("CG", "MET","MTD")),
                         DAY = seq(1, 6, by = 0.1),
                         ID=factor(data1$ID))

gam_predict<-gam_predict%>%
    mutate(fit = predict(model,gam_predict,se.fit = TRUE,type='response')$fit,
           se.fit = predict(model, gam_predict,se.fit = TRUE,type='response')$se.fit)

#get the y term of the model
test<-model$formula[[2]]

#convert to character
test<-as.character(test)
test<-as.list(test)
#we are doing fold changes, so split the string where the diagonal is. We will end up
#with a list of lenght three, only the last two contain the terms of interest


#select columns that match the pattern
data<-data %>% 
  select(DAY,GROUP,"Y"=test[[1]]) 

GAM_plot<-ggplot(data=data, aes(x=DAY, y=Y, group=GROUP)) +
    geom_point(aes(color=GROUP),size=pnt,alpha=al,show.legend = FALSE)+
  geom_ribbon(aes( x=DAY,ymin=(fit - 2*se.fit), 
                   ymax=(fit + 2*se.fit),
                   fill=GROUP
                   ),
              alpha=0.3,
              data=gam_predict,
            show.legend=FALSE,
                inherit.aes=FALSE) +
  geom_line(aes(y=fit,
                color=GROUP),
              size=2,
            data=gam_predict,
              show.legend = FALSE)+
  facet_wrap(~GROUP)+
    scale_x_continuous(breaks=c(0,2,4,6))+
      theme_classic()+
    thm1

return(GAM_plot)
  
}

a<-GAM_plot(StO2_gam,data1)+labs(y=expression(atop(StO[2])),x="Qqqq")
b<-GAM_plot(HbO2_gam,data1)+labs(y=expression(atop(HbO[2])),x="Week")
c<-GAM_plot(tHb_gam,data1)+labs(y="tHb",x="Week")
d<-GAM_plot(HbO_gam,data1)+labs(y="HbO",x="Week")

a+b+c+d+plot_annotation(tag_levels = "A") & theme(plot.title = element_text(size=20),
                                                  axis.title =element_text(size=20) )

```

```{r,GAM-plot-function}

GAM_plot2<-function(model,data){

ci <- confint(model, parm = "s(DAY)", partial_match = TRUE, type = "confidence")

## simultaneous interval
si <- confint(model, parm = "s(DAY)", type = "simultaneous", partial_match = TRUE)

# mean shift for Treatment group
Intercept <- coef(model)[1]
constMET <- coef(model)[2]+Intercept
constMTD <- coef(model)[3]+Intercept

#extract the response from the model
test<-model$formula[[2]]

#convert to character
test<-as.character(test)
test<-as.list(test)
#we are doing fold changes, so split the string where the diagonal is. We will end up
#with a list of lenght three, only the last two contain the terms of interest


#select columns that match the pattern
data<-data %>% 
  select(DAY,GROUP,"Y"=test[[1]]) 


#pointwise confidence interval
ci <- ci %>%
mutate(est = case_when(GROUP == "MET" ~ est + constMET,
                       GROUP == "MTD" ~ est + constMTD,
                                          TRUE ~ est+Intercept),
lower = case_when(GROUP == "MET" ~ lower + constMET,
                  GROUP == "MTD" ~ lower + constMTD,
                                          TRUE ~ lower+Intercept),
upper = case_when(GROUP == "MET" ~ upper + constMET,
                  GROUP == "MTD" ~ upper + constMTD,
                                          TRUE ~ upper+Intercept))

#simultaneous confidence interval
si <- si %>%
mutate(est = case_when(GROUP == "MET" ~ est + constMET,
                       GROUP == "MTD" ~ est + constMTD,
                                          TRUE ~ est+Intercept),
lower = case_when(GROUP == "MET" ~ lower + constMET,
                  GROUP == "MTD" ~ lower + constMTD,
                                          TRUE ~ lower+Intercept),
upper = case_when(GROUP == "MET" ~ upper + constMET,
                  GROUP == "MTD" ~ upper + constMTD,
                                          TRUE ~ upper+Intercept))


GAM_plot<-ggplot(ci, aes(x = DAY, y = est, group = smooth)) +
geom_line(lwd = 1) +
geom_ribbon(data = ci, mapping = aes(ymin = lower, ymax = upper, x = DAY, group = smooth,fill = GROUP),
inherit.aes = FALSE, alpha = 0.7,
show.legend=FALSE) +
geom_ribbon(data = si,
mapping = aes(ymin = lower, ymax = upper, x = DAY, group = smooth,fill =GROUP),
inherit.aes = FALSE, alpha = 0.3,
show.legend=FALSE)+
    geom_point(data=data, aes(x = DAY, 
                        y = Y, 
                        color = GROUP), 
                        size=1.5,
                        alpha=0.6, 
               inherit.aes = FALSE,
               show.legend = FALSE)+
    geom_line(data=si,aes(DAY,upper,color=GROUP), size=0.8, alpha=0.7)+
    geom_line(data=si,aes(DAY,lower,color=GROUP), size=0.8, alpha=0.7)+
    labs(y=expression(atop(StO[2],'(complete observations)')))+
    scale_x_continuous(breaks=c(1,2,3,4,5,6))+
      theme_classic()+
  theme(
    axis.text=element_text(size=22))+
      facet_wrap(~GROUP)+
      thm1

}

a<-GAM_plot2(StO2_gam,data1)+labs(y=expression(atop(StO[2])),x="Week")
b<-GAM_plot2(HbO2_gam,data1)+labs(y=expression(atop(HbO[2])),x="Week")
c<-GAM_plot2(tHb_gam,data1)+labs(y="tHb",x="Week")
d<-GAM_plot2(HbO_gam,data1)+labs(y="HbO",x="Week")

a+b+c+d+plot_annotation(tag_levels = "A")
```

**Variance appears to be very low on the model diagnostics... why?**

Now, implement the function that makes the pairwise comparisons. First, simultaneous:

```{r,pairwise-comps-func}

difference_pointwise <- function(f1, f2, smooth, by_var, smooth_var, data, Xp, V, coefs, nrep = 1000) {
  ## make sure f1 and f2 are characters
  f1 <-  as.character(f1)
  f2 <-  as.character(f2)
  cnames <- colnames(Xp)
  ## columns of Xp associated with pair of smooths
  c1 <- grepl(gratia:::mgcv_by_smooth_labels(smooth, by_var, f1), cnames, fixed = TRUE)
  c2 <- grepl(gratia:::mgcv_by_smooth_labels(smooth, by_var, f2), cnames, fixed = TRUE)
  ## rows of Xp associated with pair of smooths
  r1 <- data[[by_var]] == f1
  r2 <- data[[by_var]] == f2

  ## difference rows of Xp for pair of smooths
  X <- Xp[r1, ] - Xp[r2, ]

  ## zero the cols related to other splines
 X[, ! (c1 | c2)] <- 0

  ## zero out the parametric cols
  X[, !grepl('^s\\(', cnames)] <- 0

  ## compute difference
  sm_diff <- drop(X %*% coefs)
  se <- sqrt(rowSums((X %*% V) * X))
  nr <- NROW(X)

  ## Calculate posterior simulation for smooths
  coefs_sim <- t(rmvn(nrep, rep(0, nrow(V)), V))
  rownames(coefs_sim) <- rownames(V)
  simDev <- X %*% coefs_sim
  absDev <- abs(sweep(simDev, 1, se, FUN = "/"))
  masd <- apply(absDev, 2, max)
  crit_s <- quantile(masd, prob = 0.95, type = 8)


  out <- list(smooth = rep(smooth, nr), by = rep(by_var, nr),
              level_1 = rep(f1, nr),
              level_2 = rep(f2, nr),
              diff = sm_diff, se = se,
              lower_s = sm_diff - crit_s * se,
              upper_s = sm_diff + crit_s*se)

  out <- new_tibble(out, nrow = NROW(X), class = "difference_smooth")
  ## Only need rows associated with one of the levels
  out <- bind_cols(out, data[r1, smooth_var])

  out
}

#does both ci and si
difference_smooths <- function(model,
                                 smooth,
                                 n = 100,
                                 ci_level = 0.95,
                                 newdata = NULL,
                                 partial_match = TRUE,
                                 unconditional = FALSE,
                                 frequentist = FALSE,
                                 nrep = 10000,
                                 include_means = TRUE,
                                 ...) {
  if (missing(smooth)) {
    stop("Must specify a smooth to difference via 'smooth'.")
  }

  # smooths in model
  S <- gratia::smooths(model) # vector of smooth labels - "s(x)"
  # select smooths
  select <-
    gratia:::check_user_select_smooths(smooths = S, select = smooth,
                                       partial_match = partial_match)#,
  # model_name = expr_label(substitute(object)))
  sm_ids <- which(select)
  smooths <- gratia::get_smooths_by_id(model, sm_ids)
  sm_data <- map(sm_ids, gratia:::smooth_data,
                 model = model, n = n, include_all = TRUE)
  sm_data <- bind_rows(sm_data)
  by_var <- by_variable(smooths[[1L]])
  smooth_var <- gratia:::smooth_variable(smooths[[1L]])
  pairs <- as_tibble(as.data.frame(t(combn(levels(sm_data[[by_var]]), 2)),
                                   stringsAsFactor = FALSE))
  names(pairs) <- paste0("f", 1:2)

  Xp <- predict(model, newdata = sm_data, type = "lpmatrix")
  V <- gratia:::get_vcov(model, unconditional = unconditional,
                         frequentist = frequentist)
  coefs <- coef(model)

  out <- pmap(pairs, difference_pointwise, smooth = smooth, by_var = by_var,
              smooth_var = smooth_var, data = sm_data, Xp = Xp, V = V,
              coefs = coefs, nrep = nrep)
  out <- bind_rows(out)
  crit <- qnorm((1 - ci_level) / 2, lower.tail = FALSE)

  out <- add_column(out,
                    lower = out$diff - (crit * out$se),
                    upper = out$diff + (crit * out$se),
                   .after = 6L)
  
  out <- out %>%
  mutate(Pair_group=as.factor(paste(level_1,"-",level_2)))
  
  out
}

#simultaneous differences
diff_StO2 <- difference_smooths(StO2_gam, smooth = "s(DAY)", newdata = newdat,
                     unconditional = TRUE, frequentist = FALSE,
                     n=100, partial_match = TRUE, nrep=10000)

diff_HbO <- difference_smooths(HbO_gam, smooth = "s(DAY)", newdata = newdat,
                     unconditional = TRUE, frequentist = FALSE,
                     n=100, partial_match = TRUE, nrep=10000)

diff_HbO2 <- difference_smooths(HbO2_gam, smooth = "s(DAY)", newdata = newdat,
                     unconditional = TRUE, frequentist = FALSE,
                     n=100, partial_match = TRUE, nrep=10000)


diff_tHb <- difference_smooths(tHb_gam, smooth = "s(DAY)", newdata = newdat,
                     unconditional = TRUE, frequentist = FALSE,
                     n=100, partial_match = TRUE, nrep=10000)

rib_col<-'#8D7D82' #color for ribbon for confidence interval
control_rib <- '#875F79' #color for ribbon for control region
treat_rib <- '#A7D89E' #color for ribbon treatment region


p1<-ggplot() +
  geom_line(data = diff_StO2, aes(x = DAY, y = diff),size=1, alpha=0.5) +
  geom_ribbon(data = diff_StO2, aes(x = DAY, ymin = lower_s, ymax = upper_s,fill=Pair_group),
              alpha = 0.5, inherit.aes = FALSE, show.legend=FALSE) +
  geom_hline(yintercept = 0, lty = 2, color = "red")+
    scale_x_continuous(breaks=c(1,2,3,4,5,6))+
    labs(y="Difference\n(Complete observations)",title=expression(atop(StO[2])))+
    theme_classic()+
    theme(
    axis.text=element_text(size=22))+
  facet_wrap(~Pair_group)+
  thm1



p2<-ggplot() +
  geom_line(data = diff_HbO, aes(x = DAY, y = diff),size=1, alpha=0.5) +
  geom_ribbon(data = diff_HbO, aes(x = DAY, ymin = lower_s, ymax = upper_s,fill=Pair_group),
              alpha = 0.5, inherit.aes = FALSE, show.legend=FALSE) +
  geom_hline(yintercept = 0, lty = 2, color = "red")+
    scale_x_continuous(breaks=c(1,2,3,4,5,6))+
    labs(y="Difference\n(Complete observations)",title="HbO")+
    theme_classic()+
    theme(
    axis.text=element_text(size=22))+
  facet_wrap(~Pair_group)+
  thm1

p3<-ggplot() +
  geom_line(data = diff_HbO2, aes(x = DAY, y = diff),size=1, alpha=0.5) +
  geom_ribbon(data = diff_HbO2, aes(x = DAY, ymin = lower_s, ymax = upper_s,fill=Pair_group),
              alpha = 0.5, inherit.aes = FALSE, show.legend=FALSE) +
  geom_hline(yintercept = 0, lty = 2, color = "red")+
    scale_x_continuous(breaks=c(1,2,3,4,5,6))+
    labs(y="Difference\n(Complete observations)",title=expression(atop(HbO[2])))+
    theme_classic()+
    theme(
    axis.text=element_text(size=22))+
  facet_wrap(~Pair_group)+
  thm1

p4<-ggplot() +
  geom_line(data = diff_tHb, aes(x = DAY, y = diff),size=1, alpha=0.5) +
  geom_ribbon(data = diff_tHb, aes(x = DAY, ymin = lower_s, ymax = upper_s,fill=Pair_group),
              alpha = 0.5, inherit.aes = FALSE, show.legend=FALSE) +
  geom_hline(yintercept = 0, lty = 2, color = "red")+
    scale_x_continuous(breaks=c(1,2,3,4,5,6))+
    labs(y="Difference\n(Complete observations)",title="tHb")+
    theme_classic()+
    theme(
    axis.text=element_text(size=22))+
  facet_wrap(~Pair_group)+
  thm1

p1+p2+p3+p4+plot_annotation(tag_levels = "A")
```

I want to examine how to make the pairwise comparisons and create a pointwise confidence interval because in the paper of G. Simpson he reports pointwise confidence intervals, not simultaneous.

```{r,pw-comp}

#Modify function

difference_pointwise2 <- function(f1, f2, smooth, by_var, smooth_var, data, Xp, V, coefs) {
  ## make sure f1 and f2 are characters
  f1 <-  as.character(f1)
  f2 <-  as.character(f2)
  cnames <- colnames(Xp)
  ## columns of Xp associated with pair of smooths
  c1 <- grepl(gratia:::mgcv_by_smooth_labels(smooth, by_var, f1), cnames, fixed = TRUE)
  c2 <- grepl(gratia:::mgcv_by_smooth_labels(smooth, by_var, f2), cnames, fixed = TRUE)
  ## rows of Xp associated with pair of smooths
  r1 <- data[[by_var]] == f1
  r2 <- data[[by_var]] == f2

  ## difference rows of Xp for pair of smooths
  X <- Xp[r1, ] - Xp[r2, ]

  ## zero the cols related to other splines
 X[, ! (c1 | c2)] <- 0

  ## zero out the parametric cols
  X[, !grepl('^s\\(', cnames)] <- 0

  ## compute difference
  sm_diff <- drop(X %*% coefs)
  se <- sqrt(rowSums((X %*% V) * X))
  nr <- NROW(X)
  crit <- qt(0.05/2, df.residual(model), lower.tail = FALSE)
    
  out <- list(smooth = rep(smooth, nr), by = rep(by_var, nr),
              level_1 = rep(f1, nr),
              level_2 = rep(f2, nr),
              diff = sm_diff, se = se,
              lower = sm_diff - (crit * se),
              upper = sm_diff + (crit*se)

  out <- new_tibble(out, nrow = NROW(X), class = "difference_smooth")
  ## Only need rows associated with one of the levels
  out <- bind_cols(out, data[r1, smooth_var])

  out
}

#does both ci and si
difference_smooths2 <- function(model,
                                 smooth,
                                 n = 100,
                                 #ci_level = 0.95,
                                 newdata = NULL,
                                 partial_match = TRUE,
                                 unconditional = FALSE,
                                 frequentist = FALSE,
                                 #nrep = 10000,
                                 include_means = FALSE,
                                 ...) {
  if (missing(smooth)) {
    stop("Must specify a smooth to difference via 'smooth'.")
  }

  # smooths in model
  S <- gratia::smooths(model) # vector of smooth labels - "s(x)"
  # select smooths
  select <-
    gratia:::check_user_select_smooths(smooths = S, select = smooth,
                                       partial_match = partial_match)#,
  # model_name = expr_label(substitute(object)))
  sm_ids <- which(select)
  smooths <- gratia::get_smooths_by_id(model, sm_ids)
  sm_data <- map(sm_ids, gratia:::smooth_data,
                 model = model, n = n, include_all = TRUE)
  sm_data <- bind_rows(sm_data)
  by_var <- by_variable(smooths[[1L]])
  smooth_var <- gratia:::smooth_variable(smooths[[1L]])
  pairs <- as_tibble(as.data.frame(t(combn(levels(sm_data[[by_var]]), 2)),
                                   stringsAsFactor = FALSE))
  names(pairs) <- paste0("f", 1:2)

  Xp <- predict(model, newdata = sm_data, type = "lpmatrix")
  V <- gratia:::get_vcov(model, unconditional = unconditional,
                         frequentist = frequentist)
  coefs <- coef(model)

  out <- pmap(pairs, difference_pointwise2, smooth = smooth, by_var = by_var,
              smooth_var = smooth_var, data = sm_data, Xp = Xp, V = V,
              coefs = coefs)
  out <- bind_rows(out)
  #crit <- qnorm((1 - ci_level) / 2, lower.tail = FALSE)

  # #out <- add_column(out,
  #                   lower = out$diff - (crit * out$se),
  #                   upper = out$diff + (crit * out$se),
  #                   .after = 6L)
  
  out <- out %>%
  mutate(Pair_group=as.factor(paste(level_1,"-",level_2)))
  
  out
}
    
test_StO2 <- difference_smooths2(StO2_gam, smooth = "s(DAY)", newdata = newdat,
                     unconditional = TRUE, frequentist = FALSE,
                     n=100, partial_match = TRUE)




p11<-ggplot() +
  geom_line(data = test_StO2, aes(x = DAY, y = diff),size=1, alpha=0.5) +
  geom_ribbon(data = test_StO2, aes(x = DAY, ymin = lower_s, ymax = upper_s,fill=Pair_group),
              alpha = 0.5, inherit.aes = FALSE) +
  geom_hline(yintercept = 0, lty = 2, color = "red")+
    scale_x_continuous(breaks=c(1,2,3,4,5,6))+
    labs(y="Difference\n(Complete observations)")+
    theme_classic()+
    theme(
    axis.text=element_text(size=22))+
  facet_wrap(~Pair_group)+
  thm1

p11
#add column to make "groups" of the pairwise comparisons for plotting
```
