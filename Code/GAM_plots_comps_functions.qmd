---
title: "GAM_plots_comps_functions"
format: html
editor: visual
---
The goal of this document is to create functions that simplify the creation of GAM models and the pairwise comparisons of the smooths.

```{r, echo=FALSE, warning=FALSE}

library(here)
library(scales)
library(viridis)
library(patchwork)
library(mgcv)
library(tidyverse)
library(gratia)
library(showtext)
library(scico)
font_add("Atkinson",regular="AtkinsonHyperlegible-Regular.ttf",italic="AtkinsonHyperlegible-Italic.ttf")
showtext_auto()

thm1<-scale_fill_scico_d(palette="tofino",begin=0.2, end=0.8, direction =1, aesthetics = c("colour","fill"))
```


Load data. Variable `GROUP` needs to be a factor. Also, create the Oxyhemoglobin and Deoxyhemoglobin variables and add them to the dataframe.

```{r,StO2 plot, echo=TRUE}
data1 <- read.csv(here("data","Extraction_merged_2018_2020_2021_cohorts_FINAL.csv"))

data1$GROUP<-as.factor(data1$GROUP)
data1$HBO2<-(data1$HB*data1$STO2)
data1$HBO2_SD<-data1$HB_SD*data1$STO2
data1$HBO<-data1$HB*(1-data1$STO2)
data1$HBO_SD<-data1$HB_SD*(1-data1$STO2)

#change all MG labels to MET

data1<-data1 %>%
  mutate(GROUP=case_when(as.character(GROUP)=="MG"~"MET",
                         TRUE ~ as.character(GROUP)))

  data1$GROUP<-as.factor(data1$GROUP)


```

Get mean value at week 1

```{r,mean-at_wk1}
#get mean values per group at wk1

mean_wk1 <- subset(data1, DAY==1) %>%
  group_by(GROUP) %>%
  summarise(baseline_StO2=mean(STO2, na.rm=TRUE),
            baseline_HbO2=mean(HBO2, na.rm=TRUE),
            baseline_HbO=mean(HBO, na.rm=TRUE),
            baseline_tHb=mean(HB, na.rm=TRUE)
            )
  
#paste values back into the data1 dataframe
data1<-left_join(data1,mean_wk1,by="GROUP")
 
#calculate fold values

data1<-data1 %>%
  mutate(StO2_fold=STO2/baseline_StO2,
         tHb_fold=HB/baseline_tHb,
         HbO2_fold=HBO2/baseline_HbO2,
         HbO_fold=HBO/baseline_HbO)


```


# GAMs

GAM with interaction of group and time. All models for fold-change values will follow the same basic construction:

`model<-gam(Variable~Group+s(Day,by=Group=k=6,` \n
`method= 'REML',`\n
`data=data1)`


```{r,fit-GAM-plot}

StO2_gam <- gam(StO2_fold ~ GROUP+s(DAY, by = GROUP, k = 6),
            method='REML',
            data  = data1)

HbO2_gam <- gam(HbO2_fold ~ GROUP+s(DAY, by = GROUP, k = 6),
            method='REML',
            data  = data1)

tHb_gam <- gam(tHb_fold ~ GROUP+s(DAY, by = GROUP, k = 6),
            method='REML',
            data  = data1)

HbO_gam <- gam(HbO_fold ~ GROUP+s(DAY, by = GROUP, k = 6),
            method='REML',
            data  = data1)

#this function takes a GAM model and creates the confidence intervals (both CI and SI) and outputs the plot with the raw data
GAM_plot<-function(model,data){
  
  pnt<-4
al<-0.2
  #create grid
  gam_predict <- expand_grid(GROUP = factor(c("CG", "MET","MTD")),
                         DAY = seq(1, 6, by = 0.1),
                         ID=factor(data1$ID))

gam_predict<-gam_predict%>%
    mutate(fit = predict(model,gam_predict,se.fit = TRUE,type='response')$fit,
           se.fit = predict(model, gam_predict,se.fit = TRUE,type='response')$se.fit)

#get the y term of the model
test<-model$formula[[2]]

#convert to character
test<-as.character(test)
test<-as.list(test)
#we are doing fold changes, so split the string where the diagonal is. We will end up
#with a list of lenght three, only the last two contain the terms of interest


#select columns that match the pattern
data<-data %>% 
  select(DAY,GROUP,"Y"=test[[1]]) 

GAM_plot<-ggplot(data=data, aes(x=DAY, y=Y, group=GROUP)) +
    geom_point(aes(color=GROUP),size=pnt,alpha=al,show.legend = FALSE)+
  geom_ribbon(aes( x=DAY,ymin=(fit - 2*se.fit), 
                   ymax=(fit + 2*se.fit),
                   fill=GROUP
                   ),
              alpha=0.3,
              data=gam_predict,
            show.legend=FALSE,
                inherit.aes=FALSE) +
  geom_line(aes(y=fit,
                color=GROUP),
              size=2,
            data=gam_predict,
              show.legend = FALSE)+
  facet_wrap(~GROUP)+
    scale_x_continuous(breaks=c(0,2,4,6))+
      theme_classic()+
    thm1

return(GAM_plot)
  
}

a<-GAM_plot(StO2_gam,data1)+labs(y=expression(atop(StO[2])),x="Week")
b<-GAM_plot(HbO2_gam,data1)+labs(y=expression(atop(HbO[2])),x="Week")
c<-GAM_plot(tHb_gam,data1)+labs(y="tHb",x="Week")
d<-GAM_plot(HbO_gam,data1)+labs(y="HbO",x="Week")

a+b+c+d+plot_annotation(tag_levels = "A")

```

